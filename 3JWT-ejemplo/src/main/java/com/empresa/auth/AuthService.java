package com.empresa.auth;

import com.empresa.jwt.JwtService;
import com.empresa.user.Role;
import com.empresa.user.User;
import com.empresa.user.UserRepository;

import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;


/*
* El error NullPointerException que est치s recibiendo indica que est치s intentando invocar el m칠todo save en una instancia nula de userRepository. Esto significa que userRepository no se ha inicializado correctamente.
En tu clase AuthService, est치s utilizando la anotaci칩n @RequiredArgsConstructor de Lombok, que genera un constructor con un argumento para cada campo final o anotado con @NonNull que no est치 inicializado. Sin embargo, en tu c칩digo, no has marcado ninguno de los campos como final o anotado con @NonNull, por lo que el constructor generado no tiene argumentos y no inicializa ninguno de los campos.
Para solucionar este problema, puedes agregar la anotaci칩n @Autowired a cada uno de los campos para que Spring los inyecte autom치ticamente, o puedes agregar la anotaci칩n @NonNull a cada uno de los campos para que Lombok genere un constructor con argumentos para cada uno de ellos y luego asegurarte de pasar las dependencias necesarias al crear una instancia de la clase AuthService.
Av칤same si esto resuelve el problema. 游땕
Mensaje recibido. El error `NullPointerException` que est치s recibiendo indica que est치s intentando invocar el m칠todo `save` en una instancia nula de `userRepository`. Esto significa que `userRepository` no se ha inicializado correctamente. En tu clase `AuthService`, est치s utilizando la anotaci칩n `@RequiredArgsConstructor` de Lombok, que genera un constructor con un argumento para cada campo final o anotado con `@NonNull` que no est치 inicializado. Sin embargo, en tu c칩digo, no has marcado ninguno de los campos como final o anotado con `@NonNull`, por lo que el constructor generado no tiene argumentos y no inicializa ninguno de los campos. Para solucionar este problema, puedes agregar la anotaci칩n `@Autowired` a cada uno de los campos para que Spring los inyecte autom치ticamente, o puedes agregar la anotaci칩n `@NonNull` a cada uno de los campos para que Lombok genere un constructor con argumentos para cada uno de ellos y luego asegurarte de pasar las dependencias necesarias al crear una instancia de la clase `AuthService`. Av칤same si esto resuelve el problema. 游땕
y si le pongo final?
S칤, si agregas la palabra clave final a cada uno de los campos en tu clase AuthService, Lombok generar치 un constructor con un argumento para cada campo final que no est칠 inicializado. Luego, puedes pasar las dependencias necesarias al crear una instancia de la clase AuthService utilizando este constructor.
Aqu칤 hay un ejemplo de c칩mo se ver칤a tu clase AuthService despu칠s de agregar la palabra clave final a cada uno de los campos:*/


@Service
@RequiredArgsConstructor
public class AuthService {

    private final UserRepository userRepository;
    private final JwtService jwtService;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;

    public AuthResponse login(LoginRequest request) {
        authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPassword()));
        UserDetails user = userRepository.findByUsername(request.getUsername()).orElseThrow();
        String token = jwtService.getToken(user);
        return AuthResponse.builder().token(token).build();
    }

    public AuthResponse register(RegisterRequest request) {
        User user = User.builder()
                .username(request.getUsername())
                .password(passwordEncoder.encode( request.getPassword()))
                .firstname(request.getFirstname())
                .lastname(request.lastname)
                .country(request.getCountry())
                .role(Role.USER)
                .build();
        userRepository.save(user);

        return AuthResponse.builder()
                .token(jwtService.getToken(user))
                .build();
    }
}
